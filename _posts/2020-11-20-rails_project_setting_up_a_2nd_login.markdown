---
layout: post
title:      "Rails project setting up a 2nd Login "
date:       2020-11-20 16:08:41 +0000
permalink:  rails_project_setting_up_a_2nd_login
---


While working on my rails project I came into contact with many errors, some more annoying than others. Some of these errors were very easy to solve, but took hours to figure out. Just in case anyone has run into these errors regarding having two logins, maybe something here can help you. Also a key thing to note is I used devise to help set up authentication for my app. 

Devise is easier to set up in my opinion in the very beggining of the application, I followed this guide to install devise and then accosiate it with the user who can sign in as a student.[ https://hackernoon.com/using-devise-in-your-ruby-on-rails-application-a-step-by-step-guide-m92i3y5s](http://) There is just a few things to run, and install, then some copy paste into certain files. After that you wll have some basic authentication as well as error messages. Devise literally does so much for you, its an awesome tool to help with web applications.

Just a quick overview of my project, I decided to make an application that mimics a tutoring website. I myself, tutor and teach math & science, so I thought this would be a fun application to do and could one day be the basis of something bigger in the future. My models are tutors, students, appointments and users(admin). An appointment `belongs_to` a student and a tutor. The tutor `has_many` appointments and `has_many` students through appointments. Our students `has_many` appointments and `has_many` tutors through appointments, but the students belong to the user. Finally the last piece of the relational puzzle to make a single login is our user model which `has_many` students, `has_many` tutors through students, and `has_many` appointments through students. The way I have the application setup, only a user who is logged in can create & save a student, they cannot create a tutor, which is why I wanted to implement a 2nd login so that if you sign up as a tutor it will be created and saved. Then you have access to making appointments with students, just as a tutor should if they were creating an account on a tutor website. Devise really came in handy here. I used devise to get the login feature and associated it with the model I wanted to the user to be related too. I had originally done this for user to become a student, but I also wanted the user to be able to sign in as the tutor. I re-looked at the guide I posted above and just did the steps again for my tutor model. All the steps except the installing of devise, that would make no sense.

Also before getting into the 2nd login, if you were at this point id reccomend adding authentication through another website. I added google-omniauth2 very easily at this point of my application with this guide [https://medium.com/@adamlangsner/google-oauth-rails-5-using-devise-and-omniauth-1b7fa5f72c8e](http://)

For the 2nd login I wanted to allow a tutor to sign up/sign in and then create appointments... it wasnâ€™t easy. Out of everything, this was the hardest portion of the project to get working and still work after I blink my eyes a few times. This needed several new controllers to handle the request that allow the tutor to be the user essentially. We made a tutor/appointment controller and a tutor/student controller. Next I needed to make a migration that would add devise to the tutors table, giving access to password encryption while in the browser. Next you would need to set up a views folder for the request that goes through as the tutor being the user, a tutor would most likely want to see different things than what a user who is a student/parent would see. Maybe a different navbar and a list of all your appointments this week. 

A big problem I dealt with was getting my paths to match the right route in the right controller. The problem I constantly keep having is when I want to view the signed in tutors appointments, I get redirected to the original appointments controller instead of Tutor::AppointmentsController. This causes a problem because the original controller has logic for a user to be signed in as a student, not a tutor to be signed in. I check my routes in the url using [localhost:3000/rails/info/routes](http://). I am very certain I need to use `tutor_root_path` to get to a new appointment through a tutor. I tried new_tutor_appointment_path, but it always uses the wrong controller. I can only believe that my problem lies with how I have my routes set up.

Routes are very important and this is where I believe the problem lies. I have logic setup for the root route to be different dependent on who is signed in. I also have nested routes, but after relooking at everything and talking it out here right now I truly belive the problem it in my routes. Hopefully I can solve this problem and give more insight to people looking for a solution to the controller redirects while having a 2nd way to allow a user to login.

